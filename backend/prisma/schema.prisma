// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ROLE_USER
  ROLE_PARTNER
  ROLE_ADMIN
}

enum Devices {
  DEVICE_BROWSER
  DEVICE_ANDROID
  DEVICE_IOS
}

enum TypeServices {
  EMPTY
  TYPE_SURVEY
  TYPE_VACCINE
  TYPE_ILL
}

enum CapsLevel {
  OKAY_LEVEL
  NORMAL_LEVEL
  NOT_OKAY_LEVEL
  DANGER_LEVEL
  DEATHLY_LEVEL
}

model Token {
  id             Int      @id @default(autoincrement())
  token          String
  ip             String   @unique
  location       String
  lastOnlineTime DateTime @default(now())
  typeDevice     Devices  @default(DEVICE_BROWSER)
  users          User     @relation(fields: [userId], references: [id])
  userId         Int
}

model User {
  id            Int                @id @default(autoincrement())
  login         String             @unique
  pwd           String
  fullName      String
  email         String?
  phone         String?
  caps          UserCapability[]
  role          Role               @default(ROLE_USER)
  auths         Token[]
  services      SupplierServices[]
  resultsSurvey ResultSurvey[]
  Partner       Partner[]
}

model UserCapability {
  id          Int               @id @default(autoincrement())
  name        String
  info        String
  hazardLevel CapsLevel         @default(OKAY_LEVEL)
  user        User?             @relation(fields: [userId], references: [id])
  userId      Int?
  ill         SupplierServices? @relation(fields: [illId], references: [id])
  illId       Int?
}

model ResultSurvey {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  survey      SupplierServices @relation(fields: [surveyId], references: [id])
  info        String
  passingTime DateTime         @default(now())
  readyTime   DateTime?
  isSick      Boolean?
  userId      Int
  surveyId    Int
}

model SupplierServices {
  id             Int              @id @default(autoincrement())
  name           String
  type           TypeServices     @default(TYPE_SURVEY)
  resultsSurvey  ResultSurvey[]
  info           String
  partner        Partner?         @relation(fields: [partnerId], references: [id])
  partnerId      Int?
  User           User[]
  UserCapability UserCapability[]
}

model Partner {
  id       Int                @id @default(autoincrement())
  user     User               @relation(fields: [userId], references: [id])
  userId   Int
  name     String             @unique
  timeWork DateTime
  url      String             @unique
  about    String
  services SupplierServices[]
}
